// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000–0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications.
 */

CHIP Memory {

    IN  in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Joins RAM16K, Screen and Keyboard
    // The 15-bit address space is as follows:
    // 0..16383  RAM(16k)        00 0000000000000 -
    //                           01 1111111111111
    //
    // 16384..24575 Screen (8K)  10 0000000000000 -
    //                           10 1111111111111
    //                             
    // 24576 Keyboard            11 0000000000000
    //
    // Thus we can use the MSB to determine RAM access,
    // and bit 14 to distinguish screen from keyboard.
    
    RAM16K(in=in, out=ramOut, load=ramLoad, address=address[0..13]);
    Screen(in=in, out=screenOut, load=screenLoad, address=address[0..12]);
    Keyboard(out=kbdOut);    
    
    // Pass load bit to appropriate device
    // Assume load + keyboard address won't happen
    DMux(in=load, a=ramLoad, b=screenLoad, sel=address[14]);
    
    // Fetch output
    Mux16(a=screenOut, b=kbdOut, sel=address[13], out=deviceOut);
    Mux16(a=ramOut, b=deviceOut, sel=address[14], out=out);
}
